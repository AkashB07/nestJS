// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url = env("DATABASE_URL")
}

enum AuthCodeVerificationType {
set_password
reset_password
}

model AuthCodeVerification {
id Int @id @default(autoincrement())
type AuthCodeVerificationType
code_hash String?
user_id String?
created_at DateTime @default(now()) @map("created_at")
updated_at DateTime @updatedAt @map("updated_at")

// Define relationships if any
// user User? @relation(fields: [user_id], references: [id])

@@map("auth_code_verification")
}

model User {
id String @id @default(uuid())
name String
email String @unique
phone_no String?
is_active Boolean @default(true)
is_verified Boolean @default(false)
is_super_user Boolean @default(false)
password_hash String? @map("password_hash")
last_signed_in DateTime?
refresh_token String? @map("refresh_token")
created_at DateTime @default(now()) @map("created_at")
updated_at DateTime @updatedAt @map("updated_at")

created_by User? @relation("CreatedBy", fields: [created_byId], references: [id])
created_byId String? @map("created_by")

updated_by User? @relation("UpdatedBy", fields: [updated_byId], references: [id])
updated_byId String? @map("updated_by")

// Opposite relations
createdBy User[] @relation("CreatedBy")
updatedBy User[] @relation("UpdatedBy")

// Relations to ListGroup
createdGroups ListGroup[] @relation("CreatedBy")
updatedGroups ListGroup[] @relation("UpdatedBy")

// Relations to ListItem
createdItems ListItem[] @relation("CreatedBy")
updatedItems ListItem[] @relation("UpdatedBy")

// Relations to Data
createdDatas Data[] @relation("CreatedBy")
updatedDatas Data[] @relation("UpdatedBy")

createdComponents Component[] @relation("CreatedBy")
updatedComponents Component[] @relation("UpdatedBy")
createdAnalytics Analytics[] @relation("CreatedBy")
updatedAnalytics Analytics[] @relation("UpdatedBy")

@@map("user")
}

model ListGroup {
id Int @id @default(autoincrement())
text String
code String @unique
is_active Boolean @default(true)
created_at DateTime @default(now())
updated_at DateTime @updatedAt

created_by User? @relation("CreatedBy", fields: [created_byId], references: [id], onDelete: SetNull)
created_byId String? @map("created_by")

updated_by User? @relation("UpdatedBy", fields: [updated_byId], references: [id], onDelete: SetNull)
updated_byId String? @map("updated_by")

// ListItem relation
items ListItem[] @relation("GroupItems") // One-to-many relationship

@@map("list_group")
}

model ListItem {
id Int @id @default(autoincrement())
text String
is_active Boolean @default(true)

group ListGroup? @relation("GroupItems", fields: [group_id], references: [id], onDelete: Cascade)
group_id Int? @map("group")

created_at DateTime @default(now())
updated_at DateTime @updatedAt

created_by User? @relation("CreatedBy", fields: [created_byId], references: [id], onDelete: SetNull)
created_byId String? @map("created_by")

updated_by User? @relation("UpdatedBy", fields: [updated_byId], references: [id], onDelete: SetNull)
updated_byId String? @map("updated_by")

// Data relation
category_of_laws Data[] @relation("CategoryOfLaw") // One-to-many relationship
rules Data[] @relation("Rule") // One-to-many relationship

@@map("list_item")
}

model Data {
id Int @id @default(autoincrement())
text String
is_active Boolean @default(true)

category_of_law ListItem? @relation("CategoryOfLaw", fields: [category_of_law_id], references: [id], onDelete: Cascade)
category_of_law_id Int? @map("category_of_law")

rule ListItem? @relation("Rule", fields: [rule_id], references: [id], onDelete: Cascade)
rule_id Int? @map("rule")

created_at DateTime @default(now())
updated_at DateTime @updatedAt

created_by User? @relation("CreatedBy", fields: [created_byId], references: [id], onDelete: SetNull)
created_byId String? @map("created_by")

updated_by User? @relation("UpdatedBy", fields: [updated_byId], references: [id], onDelete: SetNull)
updated_byId String? @map("updated_by")

@@map("data")
}

model Analytics {
id String @id @default(uuid())
name String
components Component[] @relation("AnalyticsComponents")

created_at DateTime @default(now())
updated_at DateTime @updatedAt

created_by User? @relation("CreatedBy", fields: [created_by_id], references: [id], onDelete: SetNull)
updated_by User? @relation("UpdatedBy", fields: [updated_by_id], references: [id], onDelete: SetNull)
created_by_id String? // Foreign key to User (created_by)
updated_by_id String? // Foreign key to User (updated_by)

@@map("analytics")
}

model Component {
id String @id @default(uuid())
name String
component_type String?
graph_type String?

analytics_id String
analytics Analytics @relation("AnalyticsComponents", fields: [analytics_id], references: [id], onDelete: Cascade)

base_object String?
is_date Boolean @default(false)
date_granularity String?
column String?
is_child_date Boolean @default(false)
child_date_granularity String?
is_child Boolean @default(false)
child_column String?
duration_type String?
is_comparator Boolean @default(false)
criteria_filters Json?
custom_from_date DateTime?
custom_to_date DateTime?
custom_last_days Int?
show_rank String?
compare_to String?
compare_from_date DateTime?
compare_to_date DateTime?
compare_objective String?

created_at DateTime @default(now())
updated_at DateTime @updatedAt

created_by User? @relation("CreatedBy", fields: [created_by_id], references: [id], onDelete: SetNull)
updated_by User? @relation("UpdatedBy", fields: [updated_by_id], references: [id], onDelete: SetNull)
created_by_id String?
updated_by_id String?

@@map("component")
}
